// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stock.proto

package stockProto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StockRequest struct {
	Quantity             int32    `protobuf:"varint,1,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	InventoryId          string   `protobuf:"bytes,2,opt,name=InventoryId,proto3" json:"InventoryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockRequest) Reset()         { *m = StockRequest{} }
func (m *StockRequest) String() string { return proto.CompactTextString(m) }
func (*StockRequest) ProtoMessage()    {}
func (*StockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{0}
}

func (m *StockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockRequest.Unmarshal(m, b)
}
func (m *StockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockRequest.Marshal(b, m, deterministic)
}
func (m *StockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockRequest.Merge(m, src)
}
func (m *StockRequest) XXX_Size() int {
	return xxx_messageInfo_StockRequest.Size(m)
}
func (m *StockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StockRequest proto.InternalMessageInfo

func (m *StockRequest) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *StockRequest) GetInventoryId() string {
	if m != nil {
		return m.InventoryId
	}
	return ""
}

type StockResponse struct {
	Available            int32    `protobuf:"varint,1,opt,name=Available,proto3" json:"Available,omitempty"`
	Reserved             int32    `protobuf:"varint,2,opt,name=Reserved,proto3" json:"Reserved,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StockResponse) Reset()         { *m = StockResponse{} }
func (m *StockResponse) String() string { return proto.CompactTextString(m) }
func (*StockResponse) ProtoMessage()    {}
func (*StockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{1}
}

func (m *StockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockResponse.Unmarshal(m, b)
}
func (m *StockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockResponse.Marshal(b, m, deterministic)
}
func (m *StockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockResponse.Merge(m, src)
}
func (m *StockResponse) XXX_Size() int {
	return xxx_messageInfo_StockResponse.Size(m)
}
func (m *StockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StockResponse proto.InternalMessageInfo

func (m *StockResponse) GetAvailable() int32 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *StockResponse) GetReserved() int32 {
	if m != nil {
		return m.Reserved
	}
	return 0
}

type StockResponseMany struct {
	Inventories          map[string]*StockResponse `protobuf:"bytes,1,rep,name=inventories,proto3" json:"inventories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StockResponseMany) Reset()         { *m = StockResponseMany{} }
func (m *StockResponseMany) String() string { return proto.CompactTextString(m) }
func (*StockResponseMany) ProtoMessage()    {}
func (*StockResponseMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{2}
}

func (m *StockResponseMany) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StockResponseMany.Unmarshal(m, b)
}
func (m *StockResponseMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StockResponseMany.Marshal(b, m, deterministic)
}
func (m *StockResponseMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StockResponseMany.Merge(m, src)
}
func (m *StockResponseMany) XXX_Size() int {
	return xxx_messageInfo_StockResponseMany.Size(m)
}
func (m *StockResponseMany) XXX_DiscardUnknown() {
	xxx_messageInfo_StockResponseMany.DiscardUnknown(m)
}

var xxx_messageInfo_StockResponseMany proto.InternalMessageInfo

func (m *StockResponseMany) GetInventories() map[string]*StockResponse {
	if m != nil {
		return m.Inventories
	}
	return nil
}

type GetRequest struct {
	InventoryId          string   `protobuf:"bytes,1,opt,name=InventoryId,proto3" json:"InventoryId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{3}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetInventoryId() string {
	if m != nil {
		return m.InventoryId
	}
	return ""
}

type GetRequestMany struct {
	InventoryIds         []string `protobuf:"bytes,1,rep,name=InventoryIds,proto3" json:"InventoryIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequestMany) Reset()         { *m = GetRequestMany{} }
func (m *GetRequestMany) String() string { return proto.CompactTextString(m) }
func (*GetRequestMany) ProtoMessage()    {}
func (*GetRequestMany) Descriptor() ([]byte, []int) {
	return fileDescriptor_c87a7814fbd674bd, []int{4}
}

func (m *GetRequestMany) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequestMany.Unmarshal(m, b)
}
func (m *GetRequestMany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequestMany.Marshal(b, m, deterministic)
}
func (m *GetRequestMany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequestMany.Merge(m, src)
}
func (m *GetRequestMany) XXX_Size() int {
	return xxx_messageInfo_GetRequestMany.Size(m)
}
func (m *GetRequestMany) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequestMany.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequestMany proto.InternalMessageInfo

func (m *GetRequestMany) GetInventoryIds() []string {
	if m != nil {
		return m.InventoryIds
	}
	return nil
}

func init() {
	proto.RegisterType((*StockRequest)(nil), "stockProto.StockRequest")
	proto.RegisterType((*StockResponse)(nil), "stockProto.StockResponse")
	proto.RegisterType((*StockResponseMany)(nil), "stockProto.StockResponseMany")
	proto.RegisterMapType((map[string]*StockResponse)(nil), "stockProto.StockResponseMany.InventoriesEntry")
	proto.RegisterType((*GetRequest)(nil), "stockProto.GetRequest")
	proto.RegisterType((*GetRequestMany)(nil), "stockProto.GetRequestMany")
}

func init() { proto.RegisterFile("stock.proto", fileDescriptor_c87a7814fbd674bd) }

var fileDescriptor_c87a7814fbd674bd = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xd7, 0x8d, 0xca, 0xfa, 0x76, 0xca, 0xcc, 0x41, 0x6a, 0x51, 0x28, 0x39, 0xed, 0x54,
	0x61, 0x7a, 0x10, 0x2f, 0x32, 0x70, 0x8e, 0xa2, 0xc2, 0xcc, 0x4e, 0x1e, 0xb3, 0xf9, 0x1e, 0xca,
	0x42, 0x3b, 0x9b, 0xac, 0xd0, 0x8f, 0xe5, 0x37, 0xf0, 0xa3, 0x49, 0xd3, 0xba, 0x76, 0x7f, 0x0f,
	0xf3, 0x96, 0xf7, 0xed, 0x93, 0x5f, 0xde, 0xe7, 0x49, 0x0a, 0xb6, 0x54, 0xf1, 0x6c, 0xee, 0x2f,
	0x92, 0x58, 0xc5, 0x04, 0x74, 0x31, 0xce, 0xd7, 0xf4, 0x15, 0x3a, 0x93, 0xbc, 0x62, 0xf8, 0xb5,
	0x44, 0xa9, 0x88, 0x0b, 0xed, 0xf7, 0x25, 0x8f, 0x54, 0xa8, 0x32, 0xc7, 0xf0, 0x8c, 0x9e, 0xc9,
	0x56, 0x35, 0xf1, 0xc0, 0x0e, 0xa2, 0x14, 0x23, 0x15, 0x27, 0x59, 0xf0, 0xe9, 0x34, 0x3d, 0xa3,
	0x67, 0xb1, 0x7a, 0x8b, 0x06, 0x70, 0x5a, 0xd2, 0xe4, 0x22, 0x8e, 0x24, 0x92, 0x2b, 0xb0, 0x06,
	0x29, 0x0f, 0x05, 0x9f, 0x0a, 0x2c, 0x79, 0x55, 0x23, 0x3f, 0x8c, 0xa1, 0xc4, 0x24, 0xc5, 0x82,
	0x66, 0xb2, 0x55, 0x4d, 0x7f, 0x0c, 0x38, 0x5f, 0x63, 0xbd, 0xf1, 0x28, 0x23, 0x63, 0xb0, 0xc3,
	0xf2, 0xbc, 0x10, 0xa5, 0x63, 0x78, 0xad, 0x9e, 0xdd, 0xf7, 0xfd, 0xca, 0x90, 0xbf, 0xb5, 0xc7,
	0x0f, 0xaa, 0x0d, 0xc3, 0x48, 0x25, 0x19, 0xab, 0x23, 0xdc, 0x0f, 0xe8, 0x6e, 0x0a, 0x48, 0x17,
	0x5a, 0x73, 0x2c, 0xfc, 0x5b, 0x2c, 0x5f, 0x92, 0x1b, 0x30, 0x53, 0x2e, 0x96, 0xa8, 0xc7, 0xb4,
	0xfb, 0x97, 0x7b, 0x4f, 0x64, 0x85, 0xee, 0xa1, 0x79, 0x6f, 0x50, 0x1f, 0x60, 0x84, 0xea, 0x2f,
	0xd9, 0x8d, 0xf4, 0x8c, 0xed, 0xf4, 0xee, 0xe0, 0xac, 0xd2, 0x6b, 0xbb, 0x14, 0x3a, 0x35, 0x41,
	0xe1, 0xd7, 0x62, 0x6b, 0xbd, 0xfe, 0x77, 0x0b, 0x4c, 0x3d, 0x02, 0x79, 0x2e, 0xd3, 0x1f, 0x08,
	0x11, 0xcf, 0xb8, 0x42, 0xe2, 0xec, 0x18, 0x53, 0xc3, 0xdd, 0xfd, 0x06, 0x68, 0x83, 0x0c, 0x57,
	0x6f, 0x42, 0xdf, 0xc5, 0xff, 0x31, 0x02, 0xb9, 0x3c, 0x1a, 0xf3, 0x04, 0xb6, 0x6e, 0x4d, 0x50,
	0x29, 0x71, 0x34, 0xe5, 0x11, 0xda, 0xba, 0x35, 0x42, 0x45, 0x2e, 0xea, 0xc2, 0x2a, 0xf1, 0xc3,
	0x80, 0x97, 0xd2, 0xcd, 0x08, 0x8b, 0xab, 0x71, 0x77, 0x43, 0xf2, 0x6f, 0xee, 0xf5, 0xc1, 0x07,
	0x49, 0x1b, 0xd3, 0x13, 0xfd, 0x23, 0xde, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x17, 0x58,
	0xf8, 0x97, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockClient interface {
	// add stock to available stocks
	StockAllocate(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	// reserve stock from available stock
	StockReserve(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	// reserve stock from available stock
	StockRelease(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	// settle a stock, removes stock from reserved stock
	StockSettle(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	// returns amount of available stock, if quantity is provided
	StockGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StockResponse, error)
	StockGetMany(ctx context.Context, in *GetRequestMany, opts ...grpc.CallOption) (*StockResponseMany, error)
}

type stockClient struct {
	cc *grpc.ClientConn
}

func NewStockClient(cc *grpc.ClientConn) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) StockAllocate(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockAllocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockReserve(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockRelease(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockSettle(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockGetMany(ctx context.Context, in *GetRequestMany, opts ...grpc.CallOption) (*StockResponseMany, error) {
	out := new(StockResponseMany)
	err := c.cc.Invoke(ctx, "/stockProto.Stock/StockGetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServer is the server API for Stock service.
type StockServer interface {
	// add stock to available stocks
	StockAllocate(context.Context, *StockRequest) (*StockResponse, error)
	// reserve stock from available stock
	StockReserve(context.Context, *StockRequest) (*StockResponse, error)
	// reserve stock from available stock
	StockRelease(context.Context, *StockRequest) (*StockResponse, error)
	// settle a stock, removes stock from reserved stock
	StockSettle(context.Context, *StockRequest) (*StockResponse, error)
	// returns amount of available stock, if quantity is provided
	StockGet(context.Context, *GetRequest) (*StockResponse, error)
	StockGetMany(context.Context, *GetRequestMany) (*StockResponseMany, error)
}

func RegisterStockServer(s *grpc.Server, srv StockServer) {
	s.RegisterService(&_Stock_serviceDesc, srv)
}

func _Stock_StockAllocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockAllocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockAllocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockAllocate(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockReserve(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockRelease(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockSettle(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockGet(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockGetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestMany)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockGetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stockProto.Stock/StockGetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockGetMany(ctx, req.(*GetRequestMany))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stockProto.Stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockAllocate",
			Handler:    _Stock_StockAllocate_Handler,
		},
		{
			MethodName: "StockReserve",
			Handler:    _Stock_StockReserve_Handler,
		},
		{
			MethodName: "StockRelease",
			Handler:    _Stock_StockRelease_Handler,
		},
		{
			MethodName: "StockSettle",
			Handler:    _Stock_StockSettle_Handler,
		},
		{
			MethodName: "StockGet",
			Handler:    _Stock_StockGet_Handler,
		},
		{
			MethodName: "StockGetMany",
			Handler:    _Stock_StockGetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock.proto",
}
