syntax = "proto3";

package protoUserServiceV1;

service User {
    rpc HelloWorld (HelloWorldRequest) returns (HelloWorldResponse) {}
    rpc Login (LoginRequest) returns (LoginResponse) {}
    rpc Logout (EmptyRequest) returns (Result) {}
    rpc Register (RegisterRequest) returns (Result) {}
    rpc RegisterVerify (RegisterVerifyRequest) returns (LoginResponse) {}
    rpc UserEdit (UserEditRequest) returns (LoginResponse) {} // because on success, we produce new access token and refresh token
    rpc TokenVerify (EmptyRequest) returns (Result) {}
    rpc TokenRefresh (TokenRefreshRequest) returns (LoginResponse) {}
    rpc PasswordChange (PasswordChangeRequest) returns (LoginResponse) {}
    rpc ForgotPassword (ForgotPasswordRequest) returns (Result) {}
    rpc ForgotPasswordVerify (ForgotPasswordVerifyRequest) returns (Result) {}

    rpc RoleAdd (RoleAddRequest) returns (Result) {}
    rpc RoleRemove (RoleRemoveRequest) returns (Result) {}
    rpc RoleEdit (RoleAddRequest) returns (Result) {}
    rpc RoleGetOne (RoleGetRequest) returns (RoleGetResponse) {}
    rpc RoleGetList (ListRequest) returns (RoleListResponse) {}
    rpc PermissionGetList (ListRequest) returns (PermissionListResponse) {}

    rpc UserGetOne (UserGetRequest) returns (UserGetResponse) {}

    rpc UserGetList (ListRequest) returns (UserListResponse) {}

    rpc CreateDummyUser(EmptyRequest) returns (Result) {}
    rpc DeleteDummyUser(EmptyRequest) returns (Result) {}
}

message UserGetRequest {
    string field = 1;
    string value = 2;
}

message UserGetResponse {
    int32 Code = 1;
    string Message = 2;
    UserGetResponseData Data = 3;
}

message UserListResponse {
    int32 Code = 1;
    string Message = 2;
    ListData Data = 3;
}

message ListData {
    int32 page = 1;
    int32 perPage = 2;
    int32 total = 3;
    repeated UserGetResponseData items = 4;
}

message UserGetResponseData {
    string id = 19;
    string firstName = 1;
    string lastName = 2;
    string email = 3;
    string mobile = 4;
    string nationalCode = 5;
    repeated string userType = 7;
    repeated string roles = 8;
    repeated UserFinanceData finance = 9;
    repeated UserAddressData addresses = 13;
    UserSellerData seller = 14;
    UserBusinessData business = 15;
    string gender = 10;
    string parentUserId = 18;
    string birthDate = 12;
    string createdAt = 16;
    string updatedAt = 17;
}

message UserFinanceData {
    string cardNumber = 1;
    string iban = 2;
}

message UserSellerData {
}

message UserBusinessData {
}

message UserAddressData {
    string addressName = 7;
    string city = 6;
    string state = 1;
    string country = 2;
    string address = 4;
    string zipCode = 5;
    string addressType = 8;
    Location location = 9;
}

message Location {
    string lat = 1;
    string long = 2;
}

message LoginRequest {
    string Username = 1;
    string Password = 2;
}

message ForgotPasswordRequest {
    string identifier = 1;
}

message ForgotPasswordVerifyRequest {
    string identifier = 1;
    string password = 2;
    string code = 3;
}

message EmptyRequest {

}
message RoleAddRequest {
    // @inject_tag validate:"required,alpha,min=4,max=32,alpha"
    string Key = 1;
    // @inject_tag validate:"required,alpha,min=4,max=32,alpha"
    string Title = 2;
    repeated string Permissions = 3;
}

message RoleRemoveRequest {
    string Key = 1;
}

message RoleGetRequest {
    string Key = 1;
}

message ListRequest {
    int32 page = 1;
    int32 perPage = 2;
    repeated FilterEntry filters = 3;
    map<string, int32> sorting = 4;
}

message FilterEntry {
    string field = 1;
    string value = 2;
    string operator = 3;
}

message RoleGetResponse {
    string Key = 1;
    int32 code = 2;
    string message = 3;
    RoleGetResponseData data = 4;
}


message RoleGetResponseData {
    string title = 1;
    string key = 2;
    repeated string permissions = 3;
}

message RoleListData {
    int32 page = 1;
    int32 perPage = 2;
    int32 total = 3;
    repeated RoleGetResponseData items = 4;
}

message RoleListResponse {
    int32 code = 1;
    string message = 2;
    map<string, string> errors = 4;
    RoleListData data = 5;
}

message PermissionsGetResponseData {
    string title = 1;
    string key = 2;
    string createdAt = 3;
}

message PermissionListData {
    int32 page = 1;
    int32 perPage = 2;
    int32 total = 3;
    repeated PermissionsGetResponseData items = 4;
}

message PermissionListResponse {
    int32 code = 1;
    string message = 2;
    map<string, string> errors = 4;
    PermissionListData data = 5;
}


message PasswordChangeRequest {
    // @inject_tag: validate:"required,max=32"
    string passwordOld = 1;

    // @inject_tag: validate:"required,min=6,max=32"
    string passwordNew = 2;
}

message LoginResponse {
    string message = 2;
    uint32 code = 3;
    LoginResponseData data = 4;
    map<string, string> errors = 5;
}

message LoginResponseData {
    string accessToken = 1;
    string refreshToken = 2;
}

message TokenRefreshRequest {
    string refreshToken = 1;
}

message HelloWorldRequest {
    string name = 1;
}

message HelloWorldResponse {
    string greeting = 1;
}

message RegisterRequest {
    // @inject_tag: validate:"required,max=64"
    string firstName = 1;

    // @inject_tag: validate:"required,max=32"
    string lastName = 2;

    // @inject_tag: validate:"omitempty,email,max=128"
    string email = 3;

    // @inject_tag: validate:"required,numeric"
    string mobile = 4;

    // @inject_tag: validate:"omitempty,numeric,min=10,max=10"
    string nationalCode = 5;

    // @inject_tag: validate:"required,min=6"
    string password = 6;

    // @inject_tag: validate:"omitempty,alpha"
    string userType = 7;

    repeated string roles = 8;

    // @inject_tag: validate:"omitempty,numeric"
    string country = 9;

    // @inject_tag: validate:"omitempty,alpha,max=6"
    string gender = 10;

    // @inject_tag: validate:"omitempty,numeric,min=16,max=32"
    string cardNumber = 11;

    // @inject_tag: validate:"omitempty"
    string birthDate = 12;

    // @inject_tag: validate:"omitempty,min=26"
    string iban = 13;
}


message UserEditRequest {
    string userId = 15;

    // @inject_tag: validate:"required,max=64"
    string firstName = 1;

    // @inject_tag: validate:"required,max=32"
    string lastName = 2;

    // @inject_tag: validate:"omitempty,email,max=128"
    string email = 3;

    // @inject_tag: validate:"omitempty,numeric,min=10,max=10"
    string nationalCode = 5;

    repeated string roles = 8;

    // @inject_tag: validate:"omitempty,alpha,max=6"
    string gender = 10;

    // @inject_tag: validate:"omitempty"
    string birthDate = 12;
}

message RegisterVerifyRequest {
    // @inject_tag: validate:"required"
    string identifier = 1;
    // @inject_tag: validate:"required"
    string code = 2;
}

// Result is a generic type of result response
message Result {
    uint32 code = 2;
    string message = 3;
    map<string, string> errors = 4;
}

message ErrorEntry {
    string field = 1;
    string error = 2;
}